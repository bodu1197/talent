CREATE POLICY "Active packages are viewable by everyone" ON "public"."service_packages" FOR SELECT USING ((("is_active" = true) OR (EXISTS ( SELECT 1
   FROM "public"."services" "s"
  WHERE (("s"."id" = "service_packages"."service_id") AND ("s"."seller_id" = "auth"."uid"()))))));



CREATE POLICY "Active placements are public" ON "public"."premium_placements" FOR SELECT USING ((("is_active" = true) OR (EXISTS ( SELECT 1
   FROM "public"."advertising_campaigns" "c"
  WHERE (("c"."id" = "premium_placements"."campaign_id") AND (("c"."seller_id" = "auth"."uid"()) OR "public"."is_admin"()))))));



CREATE POLICY "Active services are viewable by everyone" ON "public"."services" FOR SELECT USING ((("status" = 'active'::"text") OR ("seller_id" = "auth"."uid"()) OR "public"."is_admin"()));



CREATE POLICY "Admins are viewable by authenticated users" ON "public"."admins" FOR SELECT USING (("auth"."uid"() IS NOT NULL));



CREATE POLICY "Admins can manage tags" ON "public"."tags" USING ((EXISTS ( SELECT 1
   FROM "public"."admins"
  WHERE ("admins"."user_id" = "auth"."uid"()))));



CREATE POLICY "Admins can manage withdrawals" ON "public"."withdrawal_requests" USING ((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE (("users"."id" = "auth"."uid"()) AND ("users"."user_type" = 'admin'::"text")))));



CREATE POLICY "Admins can view all activity logs" ON "public"."activity_logs" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."admins"
  WHERE ("admins"."user_id" = "auth"."uid"()))));



--
CREATE POLICY "Admins can view all search logs" ON "public"."search_logs" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."admins"
  WHERE ("admins"."user_id" = "auth"."uid"()))));



CREATE POLICY "Admins can view all settlement details" ON "public"."settlement_details" FOR SELECT USING ((EXISTS ( SELECT 1
   FROM "public"."admins"
  WHERE ("admins"."user_id" = "auth"."uid"()))));



--
CREATE POLICY "Anyone can insert search logs" ON "public"."search_logs" FOR INSERT WITH CHECK (true);



COMMENT ON POLICY "Anyone can insert search logs" ON "public"."search_logs" IS '누구나 검색 로그 삽입 가능 (익명 포함)';

--
CREATE POLICY "Anyone can view active coupons" ON "public"."coupons" FOR SELECT USING ((("is_active" = true) AND ("starts_at" <= "now"()) AND ("expires_at" >= "now"())));



CREATE POLICY "Anyone can view active quotes" ON "public"."quotes" FOR SELECT USING ((("status" = 'pending'::"text") OR ("buyer_id" = "auth"."uid"())));



CREATE POLICY "Anyone can view schema migrations" ON "public"."schema_migrations" FOR SELECT USING (true);



COMMENT ON POLICY "Anyone can view schema migrations" ON "public"."schema_migrations" IS '모든 사용자가 마이그레이션 버전 조회 가능';

--
CREATE POLICY "Anyone can view service tags" ON "public"."service_tags" FOR SELECT USING (true);



COMMENT ON POLICY "Anyone can view service tags" ON "public"."service_tags" IS '모든 사용자가 서비스 태그 조회 가능';

--
CREATE POLICY "Anyone can view tags" ON "public"."tags" FOR SELECT USING (true);



COMMENT ON POLICY "Anyone can view tags" ON "public"."tags" IS '모든 사용자가 태그 조회 가능';

--
CREATE POLICY "Authenticated users can create reports" ON "public"."reports" FOR INSERT WITH CHECK (("auth"."uid"() = "reporter_id"));



CREATE POLICY "Buyers can create orders" ON "public"."orders" FOR INSERT WITH CHECK (("auth"."uid"() = "buyer_id"));



CREATE POLICY "Buyers can create payments" ON "public"."payments" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."orders" "o"
  WHERE (("o"."id" = "payments"."order_id") AND ("o"."buyer_id" = "auth"."uid"())))));



CREATE POLICY "Buyers can create quotes" ON "public"."quotes" FOR INSERT WITH CHECK (("auth"."uid"() = "buyer_id"));



CREATE POLICY "Buyers can create reviews" ON "public"."reviews" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."orders" "o"
  WHERE (("o"."id" = "reviews"."order_id") AND ("o"."buyer_id" = "auth"."uid"()) AND ("o"."status" = 'completed'::"text")))));



CREATE POLICY "Buyers can delete own quotes" ON "public"."quotes" FOR DELETE USING (("auth"."uid"() = "buyer_id"));



CREATE POLICY "Buyers can update own quotes" ON "public"."quotes" FOR UPDATE USING (("auth"."uid"() = "buyer_id"));



CREATE POLICY "Buyers can update own reviews" ON "public"."reviews" FOR UPDATE USING (("auth"."uid"() = "buyer_id")) WITH CHECK (("auth"."uid"() = "buyer_id"));



CREATE POLICY "Campaign owners can create placements" ON "public"."premium_placements" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."advertising_campaigns" "c"
  WHERE (("c"."id" = "premium_placements"."campaign_id") AND ("c"."seller_id" = "auth"."uid"())))));



CREATE POLICY "Categories are viewable by everyone" ON "public"."categories" FOR SELECT USING ((("is_active" = true) OR "public"."is_admin"()));



CREATE POLICY "Only admins can delete admin info" ON "public"."admins" FOR DELETE USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Only admins can delete categories" ON "public"."categories" FOR DELETE USING ("public"."is_admin"());



CREATE POLICY "Only admins can insert categories" ON "public"."categories" FOR INSERT WITH CHECK ("public"."is_admin"());



CREATE POLICY "Only admins can manage coupons" ON "public"."coupons" USING ((EXISTS ( SELECT 1
   FROM "public"."admins"
  WHERE ("admins"."user_id" = "auth"."uid"()))));



CREATE POLICY "Only admins can update admin info" ON "public"."admins" FOR UPDATE USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Only admins can update categories" ON "public"."categories" FOR UPDATE USING ("public"."is_admin"()) WITH CHECK ("public"."is_admin"());



CREATE POLICY "Only admins can update reports" ON "public"."reports" FOR UPDATE USING ("public"."is_admin"()) WITH CHECK ("public"."is_admin"());



CREATE POLICY "Participants can send messages" ON "public"."messages" FOR INSERT WITH CHECK ((("auth"."uid"() = "sender_id") AND (EXISTS ( SELECT 1
   FROM "public"."conversations" "c"
  WHERE (("c"."id" = "messages"."conversation_id") AND (("c"."participant1_id" = "auth"."uid"()) OR ("c"."participant2_id" = "auth"."uid"())))))));



CREATE POLICY "Participants can view conversations" ON "public"."conversations" FOR SELECT USING ((("auth"."uid"() = "participant1_id") OR ("auth"."uid"() = "participant2_id") OR "public"."is_admin"()));



CREATE POLICY "Participants can view messages" ON "public"."messages" FOR SELECT USING (((EXISTS ( SELECT 1
   FROM "public"."conversations" "c"
  WHERE (("c"."id" = "messages"."conversation_id") AND (("c"."participant1_id" = "auth"."uid"()) OR ("c"."participant2_id" = "auth"."uid"()))))) OR "public"."is_admin"()));



CREATE POLICY "Public can view visible portfolios" ON "public"."portfolio_items" FOR SELECT USING (("is_visible" = true));



CREATE POLICY "Public reviews are viewable by everyone" ON "public"."reviews" FOR SELECT USING ((("is_visible" = true) OR ("buyer_id" = "auth"."uid"()) OR ("seller_id" = "auth"."uid"()) OR "public"."is_admin"()));



CREATE POLICY "Quote participants can view responses" ON "public"."quote_responses" FOR SELECT USING ((("auth"."uid"() = "seller_id") OR (EXISTS ( SELECT 1
   FROM "public"."quotes"
  WHERE (("quotes"."id" = "quote_responses"."quote_id") AND ("quotes"."buyer_id" = "auth"."uid"()))))));



CREATE POLICY "Related users can update orders" ON "public"."orders" FOR UPDATE USING ((("auth"."uid"() = "buyer_id") OR ("auth"."uid"() = "seller_id") OR "public"."is_admin"()));



CREATE POLICY "Sellers can create campaigns" ON "public"."advertising_campaigns" FOR INSERT WITH CHECK (("public"."is_seller"() AND ("auth"."uid"() = "seller_id")));



CREATE POLICY "Sellers can create responses" ON "public"."quote_responses" FOR INSERT WITH CHECK (("auth"."uid"() = "seller_id"));



CREATE POLICY "Sellers can create services" ON "public"."services" FOR INSERT WITH CHECK (("public"."is_seller"() AND ("auth"."uid"() = "seller_id")));



CREATE POLICY "Sellers can create withdrawals" ON "public"."withdrawal_requests" FOR INSERT WITH CHECK (("auth"."uid"() = "seller_id"));



CREATE POLICY "Sellers can delete own services" ON "public"."services" FOR DELETE USING ((("auth"."uid"() = "seller_id") OR "public"."is_admin"()));



CREATE POLICY "Sellers can manage own portfolios" ON "public"."portfolio_items" USING (("auth"."uid"() = "seller_id"));



CREATE POLICY "Sellers can update own campaigns" ON "public"."advertising_campaigns" FOR UPDATE USING ((("auth"."uid"() = "seller_id") OR "public"."is_admin"())) WITH CHECK ((("auth"."uid"() = "seller_id") OR "public"."is_admin"()));



CREATE POLICY "Sellers can update own earnings" ON "public"."seller_earnings" FOR UPDATE USING (("auth"."uid"() = "seller_id"));



CREATE POLICY "Sellers can update own responses" ON "public"."quote_responses" FOR UPDATE USING (("auth"."uid"() = "seller_id"));



CREATE POLICY "Sellers can update own services" ON "public"."services" FOR UPDATE USING ((("auth"."uid"() = "seller_id") OR "public"."is_admin"())) WITH CHECK ((("auth"."uid"() = "seller_id") OR "public"."is_admin"()));



CREATE POLICY "Sellers can view own campaigns" ON "public"."advertising_campaigns" FOR SELECT USING ((("auth"."uid"() = "seller_id") OR "public"."is_admin"()));



CREATE POLICY "Sellers can view own earnings" ON "public"."seller_earnings" FOR SELECT USING (("auth"."uid"() = "seller_id"));



CREATE POLICY "Sellers can view own transactions" ON "public"."earnings_transactions" FOR SELECT USING (("auth"."uid"() = "seller_id"));



CREATE POLICY "Sellers can view own withdrawals" ON "public"."withdrawal_requests" FOR SELECT USING (("auth"."uid"() = "seller_id"));



CREATE POLICY "Service owners can create packages" ON "public"."service_packages" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."services" "s"
  WHERE (("s"."id" = "service_packages"."service_id") AND ("s"."seller_id" = "auth"."uid"())))));



CREATE POLICY "Service owners can delete packages" ON "public"."service_packages" FOR DELETE USING ((EXISTS ( SELECT 1
   FROM "public"."services" "s"
  WHERE (("s"."id" = "service_packages"."service_id") AND ("s"."seller_id" = "auth"."uid"())))));



CREATE POLICY "Service owners can manage their service tags" ON "public"."service_tags" USING ((EXISTS ( SELECT 1
   FROM "public"."services"
  WHERE (("services"."id" = "service_tags"."service_id") AND ("services"."seller_id" = "auth"."uid"())))));



CREATE POLICY "Service owners can update packages" ON "public"."service_packages" FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM "public"."services" "s"
  WHERE (("s"."id" = "service_packages"."service_id") AND ("s"."seller_id" = "auth"."uid"()))))) WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."services" "s"
  WHERE (("s"."id" = "service_packages"."service_id") AND ("s"."seller_id" = "auth"."uid"())))));

--
CREATE POLICY "System can create notifications" ON "public"."notifications" FOR INSERT WITH CHECK (true);



CREATE POLICY "System can insert activity logs" ON "public"."activity_logs" FOR INSERT WITH CHECK (true);



CREATE POLICY "System can insert schema migrations" ON "public"."schema_migrations" FOR INSERT WITH CHECK (true);



COMMENT ON POLICY "System can insert schema migrations" ON "public"."schema_migrations" IS '시스템이 마이그레이션 기록 삽입 가능';

--
CREATE POLICY "System can manage earnings" ON "public"."seller_earnings" USING ((("auth"."jwt"() ->> 'role'::"text") = 'service_role'::"text"));



CREATE POLICY "System can manage transactions" ON "public"."earnings_transactions" USING ((("auth"."jwt"() ->> 'role'::"text") = 'service_role'::"text"));



CREATE POLICY "Users can create conversations" ON "public"."conversations" FOR INSERT WITH CHECK ((("auth"."uid"() = "participant1_id") OR ("auth"."uid"() = "participant2_id")));



CREATE POLICY "Users can create favorites" ON "public"."favorites" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can create own wallet" ON "public"."user_wallets" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can delete own favorites" ON "public"."favorites" FOR DELETE USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can insert their own category visits" ON "public"."category_visits" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can insert their own profile" ON "public"."users" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Users can update own notifications" ON "public"."notifications" FOR UPDATE USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can update their own category visits" ON "public"."category_visits" FOR UPDATE USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can update their own profile" ON "public"."users" FOR UPDATE USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "Users can use own coupons" ON "public"."user_coupons" FOR UPDATE USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view own coupons" ON "public"."user_coupons" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view own favorites" ON "public"."favorites" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view own notifications" ON "public"."notifications" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view own orders" ON "public"."orders" FOR SELECT USING ((("auth"."uid"() = "buyer_id") OR ("auth"."uid"() = "seller_id") OR "public"."is_admin"()));



CREATE POLICY "Users can view own payments" ON "public"."payments" FOR SELECT USING (((EXISTS ( SELECT 1
   FROM "public"."orders" "o"
  WHERE (("o"."id" = "payments"."order_id") AND (("o"."buyer_id" = "auth"."uid"()) OR ("o"."seller_id" = "auth"."uid"()))))) OR "public"."is_admin"()));



CREATE POLICY "Users can view own reports" ON "public"."reports" FOR SELECT USING ((("auth"."uid"() = "reporter_id") OR ("auth"."uid"() = "reported_user_id") OR "public"."is_admin"()));



CREATE POLICY "Users can view own transactions" ON "public"."wallet_transactions" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view own wallet" ON "public"."user_wallets" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view their own category visits" ON "public"."category_visits" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "Users can view their own profile" ON "public"."users" FOR SELECT USING (("auth"."uid"() = "id"));



COMMENT ON POLICY "Users can view their own profile" ON "public"."users" IS '본인 프로필만 조회 가능 - 개인정보 보호';

--
CREATE POLICY "Users can view their own search logs" ON "public"."search_logs" FOR SELECT USING (("auth"."uid"() = "user_id"));



COMMENT ON POLICY "Users can view their own search logs" ON "public"."search_logs" IS '사용자는 자신의 검색 로그만 조회 가능';

--
CREATE POLICY "ai_services_delete_policy" ON "public"."ai_services" FOR DELETE USING ((EXISTS ( SELECT 1
   FROM "public"."services"
  WHERE (("services"."id" = "ai_services"."service_id") AND ("services"."seller_id" = "auth"."uid"())))));



CREATE POLICY "ai_services_insert_policy" ON "public"."ai_services" FOR INSERT WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."services"
  WHERE (("services"."id" = "ai_services"."service_id") AND ("services"."seller_id" = "auth"."uid"())))));



CREATE POLICY "ai_services_select_policy" ON "public"."ai_services" FOR SELECT USING (true);



CREATE POLICY "ai_services_update_policy" ON "public"."ai_services" FOR UPDATE USING ((EXISTS ( SELECT 1
   FROM "public"."services"
  WHERE (("services"."id" = "ai_services"."service_id") AND ("services"."seller_id" = "auth"."uid"()))))) WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."services"
  WHERE (("services"."id" = "ai_services"."service_id") AND ("services"."seller_id" = "auth"."uid"())))));

